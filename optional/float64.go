// Code generated by optionalize
// on: 2017-10-19 12:55:52.642044927 &#43;0000 UTC
// from: github.com/Gurpartap/safer-go/optional/template/optional.go.tmpl

package optional

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"
	"fmt"

	"github.com/Gurpartap/safer-go/optional/internal/convert"
	"github.com/pkg/errors"
)

type Float64 struct {
	hasValue    bool
	unsafeValue float64
}

func NewFloat64() Float64 {
	opt := &Float64{}
	opt.Take()
	return *opt
}

func Float64From(value float64, hasValue bool) Float64 {
	opt := &Float64{}
	if hasValue {
		opt.From(value)
	}
	return *opt
}

// Take takes the value out of the optional, leaving a None in its place.
func (opt *Float64) Take() {
	var value float64
	opt.unsafeValue = value
	opt.hasValue = false
}

// From performs the conversion.
func (opt *Float64) From(value float64) {
	opt.unsafeValue = value
	opt.hasValue = true
}

// Unwrap moves the value out of the optional, if it is Some(value).
// This function returns multiple values, and if that's undesirable,
// consider using Some and None functions.
func (opt *Float64) Unwrap() (float64, bool) {
	return opt.getUnsafeValue(), opt.getHasValue()
}

// UnwrapOr returns the contained value or a default.
func (opt *Float64) UnwrapOr(def float64) float64 {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return def
}

// UnwrapOrElse returns the contained value or computes it from a closure.
func (opt *Float64) UnwrapOrElse(fn func() float64) float64 {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return fn()
}

// UnwrapOrPanic returns the contained value or panics.
func (opt *Float64) UnwrapOrPanic() float64 {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	panic("unable to unwrap Float64")
}

// And returns None if the optional is None, otherwise returns optb.
func (opt *Float64) And(optb Float64) Float64 {
	if !opt.getHasValue() {
		return *opt
	}
	return optb
}

// Or returns the optional if it contains a value, otherwise returns optb.
func (opt *Float64) Or(optb Float64) Float64 {
	if opt.getHasValue() {
		return *opt
	}
	return optb
}

// OrElse returns the optional if it contains a value, otherwise calls fn and
// returns the result.
func (opt *Float64) OrElse(fn func() Float64) Float64 {
	if opt.getHasValue() {
		return *opt
	}
	return fn()
}

// IsSome returns true if the optional is a Some value.
func (opt *Float64) IsSome() bool {
	return opt.getHasValue()
}

// IsNone returns true if the optional is a None value.
func (opt *Float64) IsNone() bool {
	return !opt.getHasValue()
}

// Some executes the given closure if there is a Some value.
func (opt *Float64) Some(fn func(value float64)) someFloat64Handler {
	if opt.getHasValue() {
		fn(opt.getUnsafeValue())
	}
	return someFloat64Handler{opt: opt}
}

// None executes the given closure if there is a None value.
func (opt *Float64) None(fn func()) {
	if !opt.getHasValue() {
		fn()
	}
}

type someFloat64Handler struct {
	opt *Float64
}

func (some someFloat64Handler) None(fn func()) {
	if !some.opt.getHasValue() {
		fn()
	}
}

func (opt *Float64) getHasValue() bool {
	return opt.hasValue
}

func (opt *Float64) getUnsafeValue() float64 {
	return opt.unsafeValue
}

// String conforms to fmt Stringer interface.
func (opt *Float64) String() string {
	if value, ok := opt.Unwrap(); ok {
		return fmt.Sprintf("Some(%v)", value)
	}
	return "None"
}

// MarshalJSON implements the json Marshaler interface.
func (opt Float64) MarshalJSON() ([]byte, error) {
	if !opt.getHasValue() {
		return []byte("null"), nil
	}
	return json.Marshal(opt.getUnsafeValue())
}

// UnmarshalJSON implements the json Unmarshaler interface.
func (opt *Float64) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, []byte("null")) || data == nil {
		opt.Take()
		return nil
	}

	err := json.Unmarshal(data, &opt.unsafeValue)
	if err != nil {
		opt.hasValue = false
		return errors.WithStack(err)
	}
	opt.hasValue = true

	return nil
}

// Scan implements the sql Scanner interface.
func (opt *Float64) Scan(value interface{}) error {
	if value == nil {
		opt.Take()
		return nil
	}

	var unsafeValue float64
	err := convert.ConvertAssign(&unsafeValue, value)
	if err != nil {
		return err
	}
	opt.From(unsafeValue)

	return nil
}

// Value implements the driver Valuer interface.
func (opt Float64) Value() (driver.Value, error) {
	if !opt.getHasValue() {
		return nil, nil
	}
	return opt.getUnsafeValue(), nil
}
