// Code generated by optionalize
// on: 2017-09-10 10:30:36.947841104 &#43;0000 UTC
// from: github.com/Gurpartap/safer-go/optional/template/optional.go.tmpl

package optional

import "fmt"

type Bytes interface {
	// Take takes the value out of the option, leaving a None in its place.
	Take()

	// From performs the conversion.
	From(value []byte)

	// Unwrap moves the value out of the optional, if it is Some(value).
	// This function returns multiple values, and if that's undesirable,
	// consider using Some and None functions.
	Unwrap() ([]byte, bool)

	// UnwrapOr returns the contained value or a default.
	UnwrapOr(def []byte) []byte

	// UnwrapOrElse returns the contained value or computes it from a closure.
	UnwrapOrElse(fn func() []byte) []byte

	// UnwrapOrPanic returns the contained value or panics.
	UnwrapOrPanic() []byte

	// And returns None if the optional is None, otherwise returns optb.
	And(optb Bytes) Bytes

	// Or returns the option if it contains a value, otherwise returns optb.
	Or(optb Bytes) Bytes

	// OrElse returns the option if it contains a value, otherwise calls fn and
	// returns the result.
	OrElse(fn func() Bytes) Bytes

	// IsSome returns true if the option is a Some value.
	IsSome() bool

	// IsNone returns true if the option is a None value.
	IsNone() bool

	// Some executes the given closure if there is a Some value.
	Some(fn func(value []byte)) someBytesHandler

	// None executes the given closure if there is a None value.
	None(fn func())
}

type someBytesHandler interface {
	None(fn func())
}

type _Bytes struct {
	hasValue    bool
	unsafeValue []byte
}

// String conforms to fmt.Stringer interface.
func (opt *_Bytes) String() string {
	if value, ok := opt.Unwrap(); ok {
		// some
		return fmt.Sprintf("Optional(%v)", value)
	}
	// none
	return "nil"
}

func NewBytes() Bytes {
	opt := &_Bytes{}
	opt.Take()
	return opt
}

func BytesFrom(value []byte) Bytes {
	opt := &_Bytes{}
	opt.From(value)
	return opt
}

// Take takes the value out of the option, leaving a None in its place.
func (opt *_Bytes) Take() {
	var value []byte
	opt.unsafeValue = value
	opt.hasValue = false
}

// From performs the conversion.
func (opt *_Bytes) From(value []byte) {
	opt.unsafeValue = value
	opt.hasValue = true
}

// Unwrap moves the value out of the optional, if it is Some(value).
// This function returns multiple values, and if that's undesirable,
// consider using Some and None functions.
func (opt *_Bytes) Unwrap() ([]byte, bool) {
	return opt.getUnsafeValue(), opt.getHasValue()
}

// UnwrapOr returns the contained value or a default.
func (opt *_Bytes) UnwrapOr(def []byte) []byte {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return def
}

// UnwrapOrElse returns the contained value or computes it from a closure.
func (opt *_Bytes) UnwrapOrElse(fn func() []byte) []byte {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return fn()
}

// UnwrapOrPanic returns the contained value or panics.
func (opt *_Bytes) UnwrapOrPanic() []byte {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	panic("unable to unwrap Bytes")
}

// And returns None if the optional is None, otherwise returns optb.
func (opt *_Bytes) And(optb Bytes) Bytes {
	if !opt.getHasValue() {
		return opt
	}
	return optb
}

// Or returns the option if it contains a value, otherwise returns optb.
func (opt *_Bytes) Or(optb Bytes) Bytes {
	if opt.getHasValue() {
		return opt
	}
	return optb
}

// OrElse returns the option if it contains a value, otherwise calls fn and
// returns the result.
func (opt *_Bytes) OrElse(fn func() Bytes) Bytes {
	if opt.getHasValue() {
		return opt
	}
	return fn()
}

// IsSome returns true if the option is a Some value.
func (opt *_Bytes) IsSome() bool {
	return opt.getHasValue()
}

// IsNone returns true if the option is a None value.
func (opt *_Bytes) IsNone() bool {
	return !opt.getHasValue()
}

// Some executes the given closure if there is a Some value.
func (opt *_Bytes) Some(fn func(value []byte)) someBytesHandler {
	if opt.getHasValue() {
		fn(opt.getUnsafeValue())
	}
	return _someBytesHandler{opt: opt}
}

// None executes the given closure if there is a None value.
func (opt *_Bytes) None(fn func()) {
	if !opt.getHasValue() {
		fn()
	}
}

type _someBytesHandler struct {
	opt *_Bytes
}

func (some _someBytesHandler) None(fn func()) {
	if !some.opt.getHasValue() {
		fn()
	}
}

func (opt *_Bytes) getHasValue() bool {
	return opt.hasValue
}

func (opt *_Bytes) getUnsafeValue() []byte {
	return opt.unsafeValue
}
