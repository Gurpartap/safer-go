// Code generated by optionalize
// on: 2017-10-19 08:58:26.884692515 &#43;0000 UTC
// from: github.com/Gurpartap/safer-go/optional/template/optional.go.tmpl

package optional

import "fmt"

type OptionalBoolSlice interface {
	// Take takes the value out of the option, leaving a None in its place.
	Take()

	// From performs the conversion.
	From(value Bool)

	// Unwrap moves the value out of the optional, if it is Some(value).
	// This function returns multiple values, and if that's undesirable,
	// consider using Some and None functions.
	Unwrap() (Bool, bool)

	// UnwrapOr returns the contained value or a default.
	UnwrapOr(def Bool) Bool

	// UnwrapOrElse returns the contained value or computes it from a closure.
	UnwrapOrElse(fn func() Bool) Bool

	// UnwrapOrPanic returns the contained value or panics.
	UnwrapOrPanic() Bool

	// And returns None if the optional is None, otherwise returns optb.
	And(optb OptionalBoolSlice) OptionalBoolSlice

	// Or returns the optional if it contains a value, otherwise returns optb.
	Or(optb OptionalBoolSlice) OptionalBoolSlice

	// OrElse returns the optional if it contains a value, otherwise calls fn
	// and returns the result.
	OrElse(fn func() OptionalBoolSlice) OptionalBoolSlice

	// IsSome returns true if the optional is a Some value.
	IsSome() bool

	// IsNone returns true if the optional is a None value.
	IsNone() bool

	// Some executes the given closure if there is a Some value.
	Some(fn func(value Bool)) someOptionalBoolSliceHandler

	// None executes the given closure if there is a None value.
	None(fn func())
}

type someOptionalBoolSliceHandler interface {
	None(fn func())
}

type _OptionalBoolSlice struct {
	hasValue    bool
	unsafeValue Bool
}

func NewOptionalBoolSlice() OptionalBoolSlice {
	opt := &_OptionalBoolSlice{}
	opt.Take()
	return opt
}

func OptionalBoolSliceFrom(value Bool, hasValue bool) OptionalBoolSlice {
	opt := &_OptionalBoolSlice{}
	if hasValue {
		opt.From(value)
	}
	return opt
}

// Take takes the value out of the optional, leaving a None in its place.
func (opt *_OptionalBoolSlice) Take() {
	var value Bool
	opt.unsafeValue = value
	opt.hasValue = false
}

// From performs the conversion.
func (opt *_OptionalBoolSlice) From(value Bool) {
	opt.unsafeValue = value
	opt.hasValue = true
}

// Unwrap moves the value out of the optional, if it is Some(value).
// This function returns multiple values, and if that's undesirable,
// consider using Some and None functions.
func (opt *_OptionalBoolSlice) Unwrap() (Bool, bool) {
	return opt.getUnsafeValue(), opt.getHasValue()
}

// UnwrapOr returns the contained value or a default.
func (opt *_OptionalBoolSlice) UnwrapOr(def Bool) Bool {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return def
}

// UnwrapOrElse returns the contained value or computes it from a closure.
func (opt *_OptionalBoolSlice) UnwrapOrElse(fn func() Bool) Bool {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return fn()
}

// UnwrapOrPanic returns the contained value or panics.
func (opt *_OptionalBoolSlice) UnwrapOrPanic() Bool {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	panic("unable to unwrap OptionalBoolSlice")
}

// And returns None if the optional is None, otherwise returns optb.
func (opt *_OptionalBoolSlice) And(optb OptionalBoolSlice) OptionalBoolSlice {
	if !opt.getHasValue() {
		return opt
	}
	return optb
}

// Or returns the optional if it contains a value, otherwise returns optb.
func (opt *_OptionalBoolSlice) Or(optb OptionalBoolSlice) OptionalBoolSlice {
	if opt.getHasValue() {
		return opt
	}
	return optb
}

// OrElse returns the optional if it contains a value, otherwise calls fn and
// returns the result.
func (opt *_OptionalBoolSlice) OrElse(fn func() OptionalBoolSlice) OptionalBoolSlice {
	if opt.getHasValue() {
		return opt
	}
	return fn()
}

// IsSome returns true if the optional is a Some value.
func (opt *_OptionalBoolSlice) IsSome() bool {
	return opt.getHasValue()
}

// IsNone returns true if the optional is a None value.
func (opt *_OptionalBoolSlice) IsNone() bool {
	return !opt.getHasValue()
}

// Some executes the given closure if there is a Some value.
func (opt *_OptionalBoolSlice) Some(fn func(value Bool)) someOptionalBoolSliceHandler {
	if opt.getHasValue() {
		fn(opt.getUnsafeValue())
	}
	return _someOptionalBoolSliceHandler{opt: opt}
}

// None executes the given closure if there is a None value.
func (opt *_OptionalBoolSlice) None(fn func()) {
	if !opt.getHasValue() {
		fn()
	}
}

type _someOptionalBoolSliceHandler struct {
	opt *_OptionalBoolSlice
}

func (some _someOptionalBoolSliceHandler) None(fn func()) {
	if !some.opt.getHasValue() {
		fn()
	}
}

func (opt *_OptionalBoolSlice) getHasValue() bool {
	return opt.hasValue
}

func (opt *_OptionalBoolSlice) getUnsafeValue() Bool {
	return opt.unsafeValue
}

// String conforms to fmt.Stringer interface.
func (opt *_OptionalBoolSlice) String() string {
	if value, ok := opt.Unwrap(); ok {
		return fmt.Sprintf("Some(%v)", value)
	}
	return "None"
}
