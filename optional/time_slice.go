// Code generated by optionalize
// on: 2017-10-19 12:56:01.260861051 &#43;0000 UTC
// from: github.com/Gurpartap/safer-go/optional/template/optional.go.tmpl

package optional

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Gurpartap/safer-go/optional/internal/convert"
	"github.com/pkg/errors"
)

type TimeSlice struct {
	hasValue    bool
	unsafeValue []time.Time
}

func NewTimeSlice() TimeSlice {
	opt := &TimeSlice{}
	opt.Take()
	return *opt
}

func TimeSliceFrom(value []time.Time, hasValue bool) TimeSlice {
	opt := &TimeSlice{}
	if hasValue {
		opt.From(value)
	}
	return *opt
}

// Take takes the value out of the optional, leaving a None in its place.
func (opt *TimeSlice) Take() {
	var value []time.Time
	opt.unsafeValue = value
	opt.hasValue = false
}

// From performs the conversion.
func (opt *TimeSlice) From(value []time.Time) {
	opt.unsafeValue = value
	opt.hasValue = true
}

// Unwrap moves the value out of the optional, if it is Some(value).
// This function returns multiple values, and if that's undesirable,
// consider using Some and None functions.
func (opt *TimeSlice) Unwrap() ([]time.Time, bool) {
	return opt.getUnsafeValue(), opt.getHasValue()
}

// UnwrapOr returns the contained value or a default.
func (opt *TimeSlice) UnwrapOr(def []time.Time) []time.Time {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return def
}

// UnwrapOrElse returns the contained value or computes it from a closure.
func (opt *TimeSlice) UnwrapOrElse(fn func() []time.Time) []time.Time {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return fn()
}

// UnwrapOrPanic returns the contained value or panics.
func (opt *TimeSlice) UnwrapOrPanic() []time.Time {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	panic("unable to unwrap TimeSlice")
}

// And returns None if the optional is None, otherwise returns optb.
func (opt *TimeSlice) And(optb TimeSlice) TimeSlice {
	if !opt.getHasValue() {
		return *opt
	}
	return optb
}

// Or returns the optional if it contains a value, otherwise returns optb.
func (opt *TimeSlice) Or(optb TimeSlice) TimeSlice {
	if opt.getHasValue() {
		return *opt
	}
	return optb
}

// OrElse returns the optional if it contains a value, otherwise calls fn and
// returns the result.
func (opt *TimeSlice) OrElse(fn func() TimeSlice) TimeSlice {
	if opt.getHasValue() {
		return *opt
	}
	return fn()
}

// IsSome returns true if the optional is a Some value.
func (opt *TimeSlice) IsSome() bool {
	return opt.getHasValue()
}

// IsNone returns true if the optional is a None value.
func (opt *TimeSlice) IsNone() bool {
	return !opt.getHasValue()
}

// Some executes the given closure if there is a Some value.
func (opt *TimeSlice) Some(fn func(value []time.Time)) someTimeSliceHandler {
	if opt.getHasValue() {
		fn(opt.getUnsafeValue())
	}
	return someTimeSliceHandler{opt: opt}
}

// None executes the given closure if there is a None value.
func (opt *TimeSlice) None(fn func()) {
	if !opt.getHasValue() {
		fn()
	}
}

type someTimeSliceHandler struct {
	opt *TimeSlice
}

func (some someTimeSliceHandler) None(fn func()) {
	if !some.opt.getHasValue() {
		fn()
	}
}

func (opt *TimeSlice) getHasValue() bool {
	return opt.hasValue
}

func (opt *TimeSlice) getUnsafeValue() []time.Time {
	return opt.unsafeValue
}

// String conforms to fmt Stringer interface.
func (opt *TimeSlice) String() string {
	if value, ok := opt.Unwrap(); ok {
		return fmt.Sprintf("Some(%v)", value)
	}
	return "None"
}

// MarshalJSON implements the json Marshaler interface.
func (opt TimeSlice) MarshalJSON() ([]byte, error) {
	if !opt.getHasValue() {
		return []byte("null"), nil
	}
	return json.Marshal(opt.getUnsafeValue())
}

// UnmarshalJSON implements the json Unmarshaler interface.
func (opt *TimeSlice) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, []byte("null")) || data == nil {
		opt.Take()
		return nil
	}

	err := json.Unmarshal(data, &opt.unsafeValue)
	if err != nil {
		opt.hasValue = false
		return errors.WithStack(err)
	}
	opt.hasValue = true

	return nil
}

// Scan implements the sql Scanner interface.
func (opt *TimeSlice) Scan(value interface{}) error {
	if value == nil {
		opt.Take()
		return nil
	}

	var unsafeValue []time.Time
	err := convert.ConvertAssign(&unsafeValue, value)
	if err != nil {
		return err
	}
	opt.From(unsafeValue)

	return nil
}

// Value implements the driver Valuer interface.
func (opt TimeSlice) Value() (driver.Value, error) {
	if !opt.getHasValue() {
		return nil, nil
	}
	return opt.getUnsafeValue(), nil
}
