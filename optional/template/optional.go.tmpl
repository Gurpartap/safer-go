// Code generated by optionalize
// on: {{ .Timestamp }}
// from: github.com/Gurpartap/safer-go/optional/template/optional.go.tmpl

package {{ .PackageName }}

{{ if .ImportPackages }}
import (
	{{ range .ImportPackages }}
	"{{ . }}"
	{{ end }}
)

{{ end }}

type {{ .WrapperName }} interface {
	// Take takes the value out of the option, leaving a None in its place.
	Take()

	// From performs the conversion.
	From(value {{ .WrappedName }})

	// Unwrap moves the value out of the optional, if it is Some(value).
	// This function returns multiple values, and if that's undesirable,
    // consider using Some and None functions.
	Unwrap() ({{ .WrappedName }}, bool)

	// UnwrapOr returns the contained value or a default.
	UnwrapOr(def {{ .WrappedName }}) {{ .WrappedName }}

	// UnwrapOrElse returns the contained value or computes it from a closure.
	UnwrapOrElse(fn func() {{ .WrappedName }}) {{ .WrappedName }}

	// UnwrapOrPanic returns the contained value or panics.
	UnwrapOrPanic() {{ .WrappedName }}

	// And returns None if the optional is None, otherwise returns optb.
	And(optb {{ .WrapperName }}) {{ .WrapperName }}

	// Or returns the optional if it contains a value, otherwise returns optb.
	Or(optb {{ .WrapperName }}) {{ .WrapperName }}
	
	// OrElse returns the optional if it contains a value, otherwise calls fn
	// and returns the result.
	OrElse(fn func() {{ .WrapperName }}) {{ .WrapperName }}
	
    // IsSome returns true if the optional is a Some value.
    IsSome() bool

    // IsNone returns true if the optional is a None value.
    IsNone() bool

    // Some executes the given closure if there is a Some value.
	Some(fn func(value {{ .WrappedName }})) some{{ .WrapperName | title }}Handler

    // None executes the given closure if there is a None value.
    None(fn func())
}

type some{{ .WrapperName | title }}Handler interface {
	None(fn func())
}

type _{{ .WrapperName }} struct {
	hasValue    bool
	unsafeValue {{ .WrappedName }}
}

func New{{ .WrapperName | title }}() {{ .WrapperName }} {
	opt := &_{{ .WrapperName }}{}
	opt.Take()
	return opt
}

func {{ .WrapperName | title }}From(value {{ .WrappedName }}, hasValue bool) {{ .WrapperName }} {
	opt := &_{{ .WrapperName }}{}
	if hasValue {
		opt.From(value)
	}
	return opt
}

// Take takes the value out of the optional, leaving a None in its place.
func (opt *_{{ .WrapperName }}) Take() {
	var value {{ .WrappedName }}
	opt.unsafeValue = value
	opt.hasValue = false
}

// From performs the conversion.
func (opt *_{{ .WrapperName }}) From(value {{ .WrappedName }}) {
	opt.unsafeValue = value
	opt.hasValue = true
}

// Unwrap moves the value out of the optional, if it is Some(value).
// This function returns multiple values, and if that's undesirable,
// consider using Some and None functions.
func (opt *_{{ .WrapperName }}) Unwrap() ({{ .WrappedName }}, bool) {
	return opt.getUnsafeValue(), opt.getHasValue()
}

// UnwrapOr returns the contained value or a default.
func (opt *_{{ .WrapperName }}) UnwrapOr(def {{ .WrappedName }}) {{ .WrappedName }} {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return def
}

// UnwrapOrElse returns the contained value or computes it from a closure.
func (opt *_{{ .WrapperName }}) UnwrapOrElse(fn func() {{ .WrappedName }}) {{ .WrappedName }} {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return fn()
}

// UnwrapOrPanic returns the contained value or panics.
func (opt *_{{ .WrapperName }}) UnwrapOrPanic() {{ .WrappedName }} {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	panic("unable to unwrap {{ .WrapperName }}")
}

// And returns None if the optional is None, otherwise returns optb.
func (opt *_{{ .WrapperName }}) And(optb {{ .WrapperName }}) {{ .WrapperName }} {
	if !opt.getHasValue() {
		return opt
	}
	return optb
}

// Or returns the optional if it contains a value, otherwise returns optb.
func (opt *_{{ .WrapperName }}) Or(optb {{ .WrapperName }}) {{ .WrapperName }} {
	if opt.getHasValue() {
		return opt
	}
	return optb
}

// OrElse returns the optional if it contains a value, otherwise calls fn and
// returns the result.
func (opt *_{{ .WrapperName }}) OrElse(fn func() {{ .WrapperName }}) {{ .WrapperName }} {
	if opt.getHasValue() {
		return opt
	}
	return fn()
}

// IsSome returns true if the optional is a Some value.
func (opt *_{{ .WrapperName }}) IsSome() bool {
	return opt.getHasValue()
}

// IsNone returns true if the optional is a None value.
func (opt *_{{ .WrapperName }}) IsNone() bool {
	return !opt.getHasValue()
}

// Some executes the given closure if there is a Some value.
func (opt *_{{ .WrapperName }}) Some(fn func(value {{ .WrappedName }})) some{{ .WrapperName | title }}Handler {
	if opt.getHasValue() {
		fn(opt.getUnsafeValue())
	}
	return _some{{ .WrapperName | title }}Handler{opt: opt}
}

// None executes the given closure if there is a None value.
func (opt *_{{ .WrapperName }}) None(fn func()) {
	if !opt.getHasValue() {
		fn()
	}
}

type _some{{ .WrapperName | title }}Handler struct {
	opt *_{{ .WrapperName }}
}

func (some _some{{ .WrapperName | title }}Handler) None(fn func()) {
	if !some.opt.getHasValue() {
		fn()
	}
}

func (opt *_{{ .WrapperName }}) getHasValue() bool {
	return opt.hasValue
}

func (opt *_{{ .WrapperName }}) getUnsafeValue() {{ .WrappedName }} {
	return opt.unsafeValue
}

// String conforms to fmt.Stringer interface.
func (opt *_{{ .WrapperName }}) String() string {
	if value, ok := opt.Unwrap(); ok {
		return fmt.Sprintf("Some(%v)", value)
	}
	return "None"
}
