// Code generated by optionalize
// on: 2017-10-19 12:56:06.927243781 &#43;0000 UTC
// from: github.com/Gurpartap/safer-go/optional/template/optional.go.tmpl

package optional

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"
	"fmt"

	"github.com/Gurpartap/safer-go/optional/internal/convert"
	"github.com/pkg/errors"
)

type OptionalErrorSlice struct {
	hasValue    bool
	unsafeValue Error
}

func NewOptionalErrorSlice() OptionalErrorSlice {
	opt := &OptionalErrorSlice{}
	opt.Take()
	return *opt
}

func OptionalErrorSliceFrom(value Error, hasValue bool) OptionalErrorSlice {
	opt := &OptionalErrorSlice{}
	if hasValue {
		opt.From(value)
	}
	return *opt
}

// Take takes the value out of the optional, leaving a None in its place.
func (opt *OptionalErrorSlice) Take() {
	var value Error
	opt.unsafeValue = value
	opt.hasValue = false
}

// From performs the conversion.
func (opt *OptionalErrorSlice) From(value Error) {
	opt.unsafeValue = value
	opt.hasValue = true
}

// Unwrap moves the value out of the optional, if it is Some(value).
// This function returns multiple values, and if that's undesirable,
// consider using Some and None functions.
func (opt *OptionalErrorSlice) Unwrap() (Error, bool) {
	return opt.getUnsafeValue(), opt.getHasValue()
}

// UnwrapOr returns the contained value or a default.
func (opt *OptionalErrorSlice) UnwrapOr(def Error) Error {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return def
}

// UnwrapOrElse returns the contained value or computes it from a closure.
func (opt *OptionalErrorSlice) UnwrapOrElse(fn func() Error) Error {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	return fn()
}

// UnwrapOrPanic returns the contained value or panics.
func (opt *OptionalErrorSlice) UnwrapOrPanic() Error {
	if opt.getHasValue() {
		return opt.getUnsafeValue()
	}
	panic("unable to unwrap OptionalErrorSlice")
}

// And returns None if the optional is None, otherwise returns optb.
func (opt *OptionalErrorSlice) And(optb OptionalErrorSlice) OptionalErrorSlice {
	if !opt.getHasValue() {
		return *opt
	}
	return optb
}

// Or returns the optional if it contains a value, otherwise returns optb.
func (opt *OptionalErrorSlice) Or(optb OptionalErrorSlice) OptionalErrorSlice {
	if opt.getHasValue() {
		return *opt
	}
	return optb
}

// OrElse returns the optional if it contains a value, otherwise calls fn and
// returns the result.
func (opt *OptionalErrorSlice) OrElse(fn func() OptionalErrorSlice) OptionalErrorSlice {
	if opt.getHasValue() {
		return *opt
	}
	return fn()
}

// IsSome returns true if the optional is a Some value.
func (opt *OptionalErrorSlice) IsSome() bool {
	return opt.getHasValue()
}

// IsNone returns true if the optional is a None value.
func (opt *OptionalErrorSlice) IsNone() bool {
	return !opt.getHasValue()
}

// Some executes the given closure if there is a Some value.
func (opt *OptionalErrorSlice) Some(fn func(value Error)) someOptionalErrorSliceHandler {
	if opt.getHasValue() {
		fn(opt.getUnsafeValue())
	}
	return someOptionalErrorSliceHandler{opt: opt}
}

// None executes the given closure if there is a None value.
func (opt *OptionalErrorSlice) None(fn func()) {
	if !opt.getHasValue() {
		fn()
	}
}

type someOptionalErrorSliceHandler struct {
	opt *OptionalErrorSlice
}

func (some someOptionalErrorSliceHandler) None(fn func()) {
	if !some.opt.getHasValue() {
		fn()
	}
}

func (opt *OptionalErrorSlice) getHasValue() bool {
	return opt.hasValue
}

func (opt *OptionalErrorSlice) getUnsafeValue() Error {
	return opt.unsafeValue
}

// String conforms to fmt Stringer interface.
func (opt *OptionalErrorSlice) String() string {
	if value, ok := opt.Unwrap(); ok {
		return fmt.Sprintf("Some(%v)", value)
	}
	return "None"
}

// MarshalJSON implements the json Marshaler interface.
func (opt OptionalErrorSlice) MarshalJSON() ([]byte, error) {
	if !opt.getHasValue() {
		return []byte("null"), nil
	}
	return json.Marshal(opt.getUnsafeValue())
}

// UnmarshalJSON implements the json Unmarshaler interface.
func (opt *OptionalErrorSlice) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, []byte("null")) || data == nil {
		opt.Take()
		return nil
	}

	err := json.Unmarshal(data, &opt.unsafeValue)
	if err != nil {
		opt.hasValue = false
		return errors.WithStack(err)
	}
	opt.hasValue = true

	return nil
}

// Scan implements the sql Scanner interface.
func (opt *OptionalErrorSlice) Scan(value interface{}) error {
	if value == nil {
		opt.Take()
		return nil
	}

	var unsafeValue Error
	err := convert.ConvertAssign(&unsafeValue, value)
	if err != nil {
		return err
	}
	opt.From(unsafeValue)

	return nil
}

// Value implements the driver Valuer interface.
func (opt OptionalErrorSlice) Value() (driver.Value, error) {
	if !opt.getHasValue() {
		return nil, nil
	}
	return opt.getUnsafeValue(), nil
}
